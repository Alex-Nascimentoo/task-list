// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  tasks Task[]

  @@map("users")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String @map(name: "provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  sessionToken String   @unique @map(name: "session_token")
  userId       String  @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
  @@map("verification_tokens")
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique @map(name: "credential_id")
  userId               String @map(name: "user_id")
  providerAccountId    String @map(name: "provider_account_id")
  credentialPublicKey  String @map(name: "credential_public_key")
  counter              Int
  credentialDeviceType String @map(name: "credential_device_type")
  credentialBackedUp   Boolean @map(name: "credential_backed_up")
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Task {
  id String @id @default(cuid())
  title String @unique
  cost Int
  dueDate DateTime @map(name: "due_date")
  presentOrder Int @default(autoincrement()) @unique @map(name: "present_order")

  user User @relation(fields: [userId], references: [id])
  userId String @map(name: "user_id")
}
